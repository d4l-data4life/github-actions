name: Action Setup
description: setup our build actions (lint, test, build)
inputs:
  run-code-gen:
    description: Run protobuf code generation
    required: false
    default: "false"
  setup-go:
    description: run setup-go action
    required: false
    default: "false"
  setup-node:
    description: run setup-node action
    required: false
    default: "false"
  node-version:
    description: Node.js version to use
    required: false
    default: "18"
  setup-yarn:
    description: run setup-node action, but with yarn
    required: false
    default: "false"
  acr-login:
    description: login to acr
    required: false
    default: "false"
  azure-credentials:
    description: Credentials used to login to acr
    required: false
    default: "{}"
  signing-key-passphrase:
    description: Passphrase for delegation signing key
    required: false
    default: ""
  disable-docker-cache:
    description: Disable docker cache
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Setup GitHub Action Docker cache
      uses: crazy-max/ghaction-github-runtime@v2
    - name: Boot a buildx builder
      uses: docker/setup-buildx-action@v2
      if: ${{ inputs.disable-docker-cache != 'true' }}

    - name: Protobuf code generation
      shell: bash
      run: make generate
      if: ${{ inputs.run-code-gen == 'true' }}

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
      if: ${{ inputs.setup-go == 'true' }}

    - name: Private Repo Setup
      shell: bash
      run: git config --global --add url."https://${GITHUB_USER_TOKEN}@github.com/".insteadOf "https://github.com/"
      if: ${{ inputs.setup-go == 'true' }}

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: npm
        cache-dependency-path: package-lock.json
      if: ${{ inputs.setup-node == 'true' }}

    - name: Install Node dependencies
      shell: bash
      run: npm ci
      if: ${{ inputs.setup-node == 'true' }}

    - name: Setup Yarn
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: yarn
        cache-dependency-path: yarn.lock
      if: ${{ inputs.setup-yarn == 'true' }}

    - name: Install Yarn dependencies
      shell: bash
      run: yarn install
      if: ${{ inputs.setup-yarn == 'true' }}

    - name: Get ACR credentials
      shell: bash
      env:
        CREDENTIALS: ${{ inputs.azure-credentials }}
      run: |
        set +H
        REGISTRY=$(echo $CREDENTIALS | jq -r '.containerRegistry // "crsensorhub.azurecr.io" ')
        REGISTRY_USERNAME=$(echo $CREDENTIALS | jq -r '.clientId')
        REGISTRY_PASSWORD=$(echo $CREDENTIALS | jq -r '.clientSecret')
        echo "::add-mask::$REGISTRY_USERNAME"
        echo "::add-mask::$REGISTRY_PASSWORD"
        echo REGISTRY=$REGISTRY >> $GITHUB_ENV
        echo REGISTRY_USERNAME=$REGISTRY_USERNAME >> $GITHUB_ENV
        echo REGISTRY_PASSWORD=$REGISTRY_PASSWORD >> $GITHUB_ENV
        echo DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=${{ inputs.signing-key-passphrase }} >> $GITHUB_ENV
      if: ${{ inputs.acr-login == 'true' }}

    - name: Log into registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
      if: ${{ inputs.acr-login == 'true' }}

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}
      if: ${{ inputs.signing-key-passphrase != '' }}

    - name: Get image signing key
      shell: bash
      run: |
        RUNNER_SECRET=$(az keyvault secret show \
          --vault-name airms-dev-app-kv \
          --name runner-signing-key  | yq .value)
        RUNNER_KEY=$(echo $RUNNER_SECRET | yq .runner_key)
        mkdir -p ~/.docker/trust/private
        echo $RUNNER_SECRET | yq .runner_key_content | base64 -d > ~/.docker/trust/private/$RUNNER_KEY
        chmod 600 ~/.docker/trust/private/$RUNNER_KEY
        docker trust key load --name runner ~/.docker/trust/private/$RUNNER_KEY
      if: ${{ inputs.signing-key-passphrase != '' }}
