name: Action Setup
description: Create or Update Database and User for a repository
inputs:
  project:
    description: Project (sensorhub/airms)
    default: sensorhub
  operation:
    description: Operation (create/update)
    required: false
    default: create
  environment:
    description: Environment (dev/staging/prod)
    required: true
    default: dev
  azure-credentials:
    description: Credentials used to login to azure
    required: true

runs:
  using: "composite"
  steps:
  - name: Azure CLI login
    uses: azure/login@v1
    with:
      creds: ${{ inputs.azure-credentials }}

  - name: Set environment variables
    shell: bash
    run: |
      ORG_AND_REPO=${{ github.repository }}
      echo "REPO_NAME=${ORG_AND_REPO##*/}" >> $GITHUB_ENV
      
      # Load configuration from JSON and set environment variables
      PROJECT="${{ inputs.project }}"
      ENV="${{ inputs.environment }}"
      
      # Check if project has environment-specific configuration
      HAS_ENVIRONMENTS=$(jq -r --arg project "$PROJECT" '.[$project] | has("environments")' ${{ github.action_path }}/../config.json)
      
      if [ "$HAS_ENVIRONMENTS" == "true" ]; then
        # Project has environment-specific config (like airms)
        # Get environment-specific config with fallback to default
        ENV_CONFIG=$(jq -r --arg project "$PROJECT" --arg env "$ENV" '.[$project].environments[$env] // .[$project].environments.default' ${{ github.action_path }}/../config.json)
        echo "$ENV_CONFIG" | jq -r 'to_entries[] | "\(.key | ascii_upcase)=\(.value | gsub("{environment}"; "'$ENV'"))"' >> $GITHUB_ENV
        
        # Add any project-level config (like backend_cert_name for airms)
        jq -r --arg project "$PROJECT" --arg env "$ENV" '.[$project] | to_entries | map(select(.key != "environments")) | .[] | "\(.key | ascii_upcase)=\(.value | gsub("{environment}"; $env))"' ${{ github.action_path }}/../config.json >> $GITHUB_ENV
      else
        # Project has simple config (like sensorhub)
        jq -r --arg project "$PROJECT" --arg env "$ENV" '.[$project] | to_entries[] | "\(.key | ascii_upcase)=\(.value | gsub("{environment}"; $env))"' ${{ github.action_path }}/../config.json >> $GITHUB_ENV
      fi 

  - name: Get admin db credentials
    shell: bash
    run: |
      az keyvault secret show \
        --vault-name ${{ env.KEY_VAULT_NAME }} \
        -n ${{ inputs.environment }}--db--postgres--admin | jq '.value | fromjson' \
        > admin-db-credentials.json

  - name: Set admin credentials as ENV
    uses: rgarcia-phi/json-to-variables@v1.1.0
    with:
      filename: admin-db-credentials.json
      prefix: 'admin'
      masked: true

  - name: Get service db credentials
    shell: bash
    run: |
      REPO_NAME=${{ github.repository }}
      az keyvault secret show \
        --vault-name ${{ env.KEY_VAULT_NAME }} \
        -n ${{ inputs.environment }}--db--${{ env.REPO_NAME }} | jq '.value | fromjson' \
        > service-db-credentials.json

  - name: Set service credentials as ENV
    uses: rgarcia-phi/json-to-variables@v1.1.0
    with:
      filename: service-db-credentials.json
      prefix: 'svc'
      masked: true

  - name: Run SQL script
    shell: bash
    run: ${{ github.action_path }}/database.sh ${{ inputs.operation }}
    env:
      PGDATABASE: postgres
      PGHOST: ${{env.admin_host}}
      DBNAME: ${{env.svc_DBName}}
      DBSCHEMA: ${{env.svc_DBSchema}}
      SU_NAME: ${{env.admin_username}}
      SU_PASSWORD: ${{env.admin_password}}
      USERNAME: ${{env.svc_username}}
      PASSWORD: ${{env.svc_password}}
