name: Action Setup
description: Create or Update Database and User for a repository
inputs:
  project:
    description: Project (sensorhub/airms)
    default: sensorhub
  operation:
    description: Operation (create/update)
    required: false
    default: create
  environment:
    description: Environment (dev/staging/prod)
    required: true
    default: dev
  azure-credentials:
    description: Credentials used to login to azure
    required: true

runs:
  using: "composite"
  steps:
  - name: Azure CLI login
    uses: azure/login@v1
    with:
      creds: ${{ inputs.azure-credentials }}

  - name: Set environment variables
    shell: bash
    run: |
      ORG_AND_REPO=${{ github.repository }}
      echo "REPO_NAME=${ORG_AND_REPO##*/}" >> $GITHUB_ENV
      if [ "${{ inputs.project }}" == "sensorhub" ]; then
        echo "KEY_VAULT_NAME=kv-sensorhub" >> $GITHUB_ENV
      elif [ "${{ inputs.project }}" == "airms" ]; then
        if [ "${{ inputs.environment }}" == "dev" ]; then
          echo "KEY_VAULT_NAME=airms-dev-app-kv" >> $GITHUB_ENV
        else
          echo "KEY_VAULT_NAME=airms-${{ inputs.environment }}-app-kv" >> $GITHUB_ENV
        fi
      fi

  - name: Get admin db credentials
    shell: bash
    run: |
      az keyvault secret show \
        --vault-name ${{ env.KEY_VAULT_NAME }} \
        -n ${{ inputs.environment }}--db--postgres--admin | jq '.value | fromjson' \
        > admin-db-credentials.json

  - name: Set admin credentials as ENV
    uses: rgarcia-phi/json-to-variables@v1.1.0
    with:
      filename: admin-db-credentials.json
      prefix: 'admin'
      masked: true

  - name: Get service db credentials
    shell: bash
    run: |
      REPO_NAME=${{ github.repository }}
      az keyvault secret show \
        --vault-name ${{ env.KEY_VAULT_NAME }} \
        -n ${{ inputs.environment }}--db--${{ env.REPO_NAME }} | jq '.value | fromjson' \
        > service-db-credentials.json

  - name: Set service credentials as ENV
    uses: rgarcia-phi/json-to-variables@v1.1.0
    with:
      filename: service-db-credentials.json
      prefix: 'svc'
      masked: true

  - name: Run SQL script
    shell: bash
    run: ${{ github.action_path }}/database.sh ${{ inputs.operation }}
    env:
      PGDATABASE: postgres
      PGHOST: ${{env.admin_host}}
      DBNAME: ${{env.svc_DBName}}
      SU_NAME: ${{env.admin_username}}
      SU_PASSWORD: ${{env.admin_password}}
      USERNAME: ${{env.svc_username}}
      PASSWORD: ${{env.svc_password}}
