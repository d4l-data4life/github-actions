name: Deploy
description: Deploy to AKS
inputs:
  project:
    description: Project (sensorhub/airms)
    default: sensorhub
  environment:
    description: Environment (dev/staging/prod)
    required: true
    default: dev
  azure-credentials:
    description: Credentials used to login to azure

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: v0.0.30

    - name: Set environment variables
      shell: bash
      run: |
        ORG_AND_REPO=${{ github.repository }}
        echo "REPO_NAME=${ORG_AND_REPO##*/}" >> $GITHUB_ENV
        
        # Load configuration from JSON and set environment variables
        PROJECT="${{ inputs.project }}"
        ENV="${{ inputs.environment }}"
        
        # Check if project has environment-specific configuration
        HAS_ENVIRONMENTS=$(jq -r "has(\"environments\")" ../config.json --arg project "$PROJECT" '.[$project]')
        
        if [ "$HAS_ENVIRONMENTS" == "true" ]; then
          # Project has environment-specific config (like airms)
          # Get environment-specific config with fallback to default
          ENV_CONFIG=$(jq -r --arg project "$PROJECT" --arg env "$ENV" '.[$project].environments[$env] // .[$project].environments.default' ../config.json)
          echo "$ENV_CONFIG" | jq -r 'to_entries[] | "\(.key | ascii_upcase)=\(.value | gsub("{environment}"; "'$ENV'"))"' >> $GITHUB_ENV
          
          # Add any project-level config (like backend_cert_name for airms)
          jq -r --arg project "$PROJECT" --arg env "$ENV" '.[$project] | to_entries | map(select(.key != "environments")) | .[] | "\(.key | ascii_upcase)=\(.value | gsub("{environment}"; $env))"' ../config.json >> $GITHUB_ENV
        else
          # Project has simple config (like sensorhub)
          jq -r --arg project "$PROJECT" --arg env "$ENV" '.[$project] | to_entries[] | "\(.key | ascii_upcase)=\(.value | gsub("{environment}"; $env))"' ../config.json >> $GITHUB_ENV
        fi 

    - uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'

    - name: get db secrets
      shell: bash
      run: |
        (az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ inputs.environment }}--db--${{ env.REPO_NAME }} || true) \
          | yq -P '.value | fromjson // ""' > secrets.yaml

    - name: get common secrets
      shell: bash
      run: |
        (az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ inputs.environment }}--common || true) \
          | yq -P '.value | fromjson // ""' >> secrets.yaml

    - name: get svc secrets
      shell: bash
      run: |
        (az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ inputs.environment }}--${{ env.REPO_NAME }} || true) \
          | yq -P '.value | fromjson // ""' >> secrets.yaml

    - name: get backend TLS key and certificate
      shell: bash
      run: |
        KEY=$(az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ env.BACKEND_CERT_NAME }} \
          | yq '.value' | base64 -d | openssl ec)
        CERT=$(az keyvault certificate show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ env.BACKEND_CERT_NAME }} \
          | yq '.cer' | base64 -d | openssl x509)
        yq -n '.BACKEND_TLS_KEY = strenv(KEY), .BACKEND_TLS_CERT = strenv(CERT)' >> secrets.yaml
      if: ${{ env.BACKEND_CERT_NAME != '' }}

    - name: Run deployment
      shell: bash
      run: make deploy
      env:
        SECRETS_YAML: secrets.yaml
        ENVIRONMENT: ${{ inputs.environment }}
