name: Deploy
description: Deploy to AKS
inputs:
  project:
    description: Project (sensorhub/airms)
    default: sensorhub
  environment:
    description: Environment (dev/staging/prod)
    required: true
    default: dev
  azure-credentials:
    description: Credentials used to login to azure

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: v0.0.30

    - name: Set environment variables
      shell: bash
      run: |
        ORG_AND_REPO=${{ github.repository }}
        echo "REPO_NAME=${ORG_AND_REPO##*/}" >> $GITHUB_ENV
        if [ "${{ inputs.project }}" == "sensorhub" ]; then
          echo "RESOURCE_GROUP=rg-sensorhub-${{ inputs.environment }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=k8s-sensorhub-${{ inputs.environment }}" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=kv-sensorhub" >> $GITHUB_ENV
        elif [ "${{ inputs.project }}" == "airms" ]; then
          echo "BACKEND_CERT_NAME=airms-${{ inputs.environment }}-appgw-backend-cert" >> $GITHUB_ENV
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "RESOURCE_GROUP=rg-airms-dev" >> $GITHUB_ENV
            echo "CLUSTER_NAME=airms-dev-app-k8s-cluster" >> $GITHUB_ENV
            echo "KEY_VAULT_NAME=airms-dev-app-kv" >> $GITHUB_ENV
          else
            echo "RESOURCE_GROUP=mshsclinrsrch01-airms-${{ inputs.environment }}-rgp" >> $GITHUB_ENV
            echo "CLUSTER_NAME=airms-${{ inputs.environment }}-aks" >> $GITHUB_ENV
            echo "KEY_VAULT_NAME=airms-${{ inputs.environment }}-app-kv" >> $GITHUB_ENV
          fi
        fi

    - uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'

    - name: get db secrets
      shell: bash
      run: |
        (az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ inputs.environment }}--db--${{ env.REPO_NAME }} || true) \
          | yq -P '.value | fromjson // ""' > secrets.yaml

    - name: get common secrets
      shell: bash
      run: |
        (az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ inputs.environment }}--common || true) \
          | yq -P '.value | fromjson // ""' >> secrets.yaml

    - name: get svc secrets
      shell: bash
      run: |
        (az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ inputs.environment }}--${{ env.REPO_NAME }} || true) \
          | yq -P '.value | fromjson // ""' >> secrets.yaml

    - name: get backend TLS key and certificate
      shell: bash
      run: |
        KEY=$(az keyvault secret show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ env.BACKEND_CERT_NAME }} \
          | yq '.value' | base64 -d | openssl ec)
        CERT=$(az keyvault certificate show \
          --vault-name ${{ env.KEY_VAULT_NAME }} \
          --name ${{ env.BACKEND_CERT_NAME }} \
          | yq '.cer' | base64 -d | openssl x509)
        yq -n '.BACKEND_TLS_KEY = strenv(KEY), .BACKEND_TLS_CERT = strenv(CERT)' >> secrets.yaml
      if: ${{ env.BACKEND_CERT_NAME != '' }}

    - name: Run deployment
      shell: bash
      run: make deploy
      env:
        SECRETS_YAML: secrets.yaml
        ENVIRONMENT: ${{ inputs.environment }}
